# Install Android Auto Headunit App
show_message "INSTALL ANDROID AUTO HEADUNIT APP ..."
log_message "====****   INSTALL ANDROID AUTO HEADUNIT APP ...  ****===="
log_message "===   Begin Installation Of Android Auto Headunit App  ==="
TESTBKUPS=1
if [ "${TESTBKUPS}" = "1" ]
then
	cp /jci/scripts/stage_wifi.sh "${MYDIR}/bakups/test/stage_wifi_androidauto-before.sh"
	cp /jci/opera/opera_dir/userjs/additionalApps.json "${MYDIR}/bakups/test/additionalApps_androidauto-1_before.json"
	cp /jci/sm/sm.conf "${MYDIR}/bakups/test/sm_androidauto-before.conf"
fi
mv ${MYDIR}/config/androidauto-v99 ${MYDIR}/config/androidauto

# Install Android Auto Headunit App
show_message "INSTALL ANDROID AUTO HEADUNIT APP ..."
log_message "====****   INSTALL ANDROID AUTO HEADUNIT APP ...  ****===="
log_message "===   Begin Installation Of Android Auto Headunit App  ==="

### kills all WebSocket daemons
killall -q -9 headunit
pkill websocketd

rm -f /tmp/mnt/data_persist/dev/bin/websocketd
rm -f /tmp/mnt/data_persist/dev/bin/headunit
rm -f /tmp/mnt/data_persist/dev/bin/aaserver
rm -f /tmp/mnt/data_persist/dev/bin/headunit-wrapper
rm -f /tmp/mnt/data_persist/dev/bin/input_filter
rm -f /tmp/mnt/data/enable_input_filter
rm -f /tmp/mnt/data/input_filter
rm -f /usr/lib/gstreamer-0.10/libgsth264parse.so
rm -f /usr/lib/gstreamer-0.10/libgstalsa.so.org
rm -fr /tmp/mnt/data_persist/dev/androidauto
rm -fr /jci/gui/apps/_androidauto
rm -fr /tmp/mnt/data_persist/dev/bin/headunit_libs
sed -i '/Android Auto start/d' /jci/scripts/stage_wifi.sh
sed -i '/hwclock --hctosys/d' /jci/scripts/stage_wifi.sh
sed -i '/websocketd --port=9999 sh &/d' /jci/scripts/stage_wifi.sh
sed -i '/headunit-wrapper &/d' /jci/scripts/stage_wifi.sh
sed -i '/9999/d' /jci/scripts/stage_wifi.sh
sed -i '/headunit/d' /jci/scripts/stage_wifi.sh
sed -i '/Android Auto/d' /jci/scripts/stage_wifi.sh
cp -a "${MYDIR}/config_org/androidauto/usr/lib/gstreamer-0.10/libgstalsa.so" /usr/lib/gstreamer-0.10
log_message "===     Removed old Android Auto App    ==="
if grep -Fq "input_filter" /jci/sm/sm.conf
then
	sed -i '/input_filter/ d' /jci/sm/sm.conf
	log_message "=== Clean obsolete input_filter in /jci/sm/sm.conf ==="
fi
####################################################

if [ ! -e /usr/lib/gstreamer-0.10/libgstalsa.so.org ]
then
	cp -a /usr/lib/gstreamer-0.10/libgstalsa.so /usr/lib/gstreamer-0.10/libgstalsa.so.org
	log_message "=== Backup of /usr/lib/gstreamer-0.10/libgstalsa.so to libgstalsa.so.org ==="
fi
cp -a ${MYDIR}/config/androidauto/data_persist/dev/* /tmp/mnt/data_persist/dev
cp -a ${MYDIR}/config/androidauto/usr/lib/gstreamer-0.10/* /usr/lib/gstreamer-0.10
cp -a ${MYDIR}/config/androidauto/jci/gui/apps/_androidauto /jci/gui/apps
sleep 2
chmod 755 /usr/lib/gstreamer-0.10/libgstalsa.so
chmod 755 /usr/lib/gstreamer-0.10/libgsth264parse.so
chmod 755 /tmp/mnt/data_persist/dev/bin/websocketd
chmod 755 /tmp/mnt/data_persist/dev/bin/headunit
chmod 755 /tmp/mnt/data_persist/dev/bin/headunit-wrapper
log_message "===               Copied Headunit Files                ==="
####################################################

# delete empty lines
sed -i '/^$/ d' /jci/scripts/stage_wifi.sh
sed -i '/#!/ a' /jci/scripts/stage_wifi.sh
# check for 1st line of stage_wifi.sh
if grep -Fq "#!/bin/sh" /jci/scripts/stage_wifi.sh
then
	echo "OK"
	log_message "=== 1st line of stage_wifi.sh is OK ==="
else
	cp -a "${MYDIR}/config/androidauto/stage_wifi.sh" /jci/scripts/
	log_message "=== Missing 1st line of stage_wifi.sh, copied new one ==="
fi

# add commands for Android Auto to stage_wifi
if [ -e /jci/scripts/stage_wifi.sh ]
then
	if grep -Fq "# Android Auto start" /jci/scripts/stage_wifi.sh
	then
		echo "exist"
		log_message "=== Android Auto entry already exists in /jci/scripts/stage_wifi.sh ==="
	else
		#first backup
		cp -a /jci/scripts/stage_wifi.sh /jci/scripts/stage_wifi.sh.AA
		log_message "=== Backup of /jci/scripts/stage_wifi.sh to stage_wifi.sh.AA ==="
		echo -e "\n\n### Android Auto start" >> /jci/scripts/stage_wifi.sh
		sleep 1
		echo -e "websocketd --port=9999 sh &" >> /jci/scripts/stage_wifi.sh
		log_message "=== Added Android Auto entry to /jci/scripts/stage_wifi.sh ==="
		cp /jci/scripts/stage_wifi.sh "${MYDIR}/bakups/test/stage_wifi_androidauto-after.sh"
	fi
fi
####################################################

# copy additionalApps.js, if not already present
if [ ! -e /jci/opera/opera_dir/userjs/additionalApps.js ]
then
	log_message "=== No additionalApps.js available, will copy one ==="
	cp -a ${MYDIR}/config/androidauto/jci/opera/opera_dir/userjs/additionalApps.* /jci/opera/opera_dir/userjs/
	find /jci/opera/opera_dir/userjs/ -type f -name '*.js' -exec chmod 755 {} \;
fi

# create new additionalApps.json file from scratch if not already present
if [ ! -e /jci/opera/opera_dir/userjs/additionalApps.json ]
then
	log_message "=== No additionalApps.json available, generating one ==="
	echo "[" > /jci/opera/opera_dir/userjs/additionalApps.json
	echo "]" >> /jci/opera/opera_dir/userjs/additionalApps.json
	cp /jci/opera/opera_dir/userjs/additionalApps.json "${MYDIR}/bakups/test/additionalApps_generated.json"
	chmod 755 /jci/opera/opera_dir/userjs/additionalApps.json
fi

if [ "${TESTBKUPS}" = "1" ]
then
	cp -a /jci/scripts/stage_wifi.sh ${MYDIR}/bakups/test/stage_wifi_androidauto-after.sh
	cp -a /jci/opera/opera_dir/userjs/additionalApps.json "${MYDIR}/bakups/test/additionalApps_generated.json"
fi
# call function add_app_json to modify additionalApps.json
add_app_json "_androidauto" "Android Auto"

# patch systemApp.js if needed for v59+ app list
if [ ! -e /jci/gui/apps/system/js/systemApp.js.audio ] && [ ! -e /jci/gui/apps/system/js/systemApp.js.disclaimer ] && [ ${APP_PATCH_59} = 0 ]
then
	APP_PATCH_59=1
  cp -a ${MYDIR}/config/patch59/systemApp.js /jci/gui/apps/system/js/
	log_message "===           Applied App List Patch For V59+           ==="
fi

log_message "===*** END INSTALLATION OF ANDROID AUTO HEADUNIT APP **==="
log_message " "
