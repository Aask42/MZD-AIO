# Install Android Auto Headunit App
space_check

show_message "INSTALL ANDROID AUTO HEADUNIT APP v${AA_VER} ..."
log_message "====************  INSTALL ANDROID AUTO HEADUNIT APP v${AA_VER}...*********===="
TESTBKUPS=1
if [ $TESTBKUPS -eq 1 ]
then
  cp ${STAGE_WIFI} "${MYDIR}/bakups/test/stage_wifi_androidauto-before.sh"
  [ -f ${ADDITIONAL_APPS_JSON} ] && cp ${ADDITIONAL_APPS_JSON} "${MYDIR}/bakups/test/additionalApps_androidauto-1_before.json"
fi

### kills all WebSocket daemons
killall -q -9 headunit-wrapper
killall -q -9 headunit

rm -fr /jci/gui/apps/_androidauto
rm -fr /tmp/mnt/resources/aio/apps/_androidauto
rm -fr /tmp/mnt/data_persist/dev/androidauto
rm -fr /tmp/mnt/data_persist/dev/bin/headunit*
rm -f /tmp/mnt/data_persist/dev/bin/aaserver
rm -f /tmp/mnt/data_persist/dev/bin/check-usb.sh
rm -f /tmp/mnt/data_persist/dev/bin/usb-allow.list
rm -f /tmp/mnt/data_persist/dev/bin/input_filter
rm -f /tmp/mnt/data/enable_input_filter
rm -f /tmp/mnt/data/input_filter
sed -i '/9999/d' ${STAGE_WIFI}
sed -i '/headunit/d' ${STAGE_WIFI}
sed -i '/Android Auto/d' ${STAGE_WIFI}
sed -i '/check-usb/d' ${STAGE_WIFI}
log_message "===                   Removed old Android Auto App                    ==="
if grep -Fq "input_filter" /jci/sm/sm.conf
then
  cp /jci/sm/sm.conf "${MYDIR}/bakups/test/sm_androidauto-before.conf"
  sed -i '/input_filter/ d' /jci/sm/sm.conf
  log_message "===           Clean obsolete input_filter to /jci/sm/sm.conf          ==="
  cp /jci/sm/sm.conf "${MYDIR}/bakups/test/sm_androidauto-after_fix.conf"
fi

# delete empty lines
sed -i '/^ *$/ d' ${STAGE_WIFI}
sed -i '/#!/ a\ ' ${STAGE_WIFI}

# check for 1st line of stage_wifi.sh
if ! grep -Fq "#!/bin/sh" ${STAGE_WIFI}
then
  log_message "===                 Missing 1st line of stage_wifi.sh                 ==="
  echo "#!/bin/sh" > ${STAGE_WIFI}
fi
sed -i '/#!/ a\#### Android Auto start' ${STAGE_WIFI}
sleep 1
sed -i '/Android Auto start/ i\ ' ${STAGE_WIFI}
sed -i '/Android Auto start/ a\headunit-wrapper &' ${STAGE_WIFI}
log_message "===      Added Android Auto entry to ${STAGE_WIFI}       ==="

cp -a ${MYDIR}/config/androidauto/jci/gui/apps/_androidauto ${AIO_APP_DIR}
cp -a ${MYDIR}/config/androidauto/data_persist/dev/* /tmp/mnt/data_persist/dev
chmod 777 -R /tmp/mnt/data_persist/dev/bin/
log_message "===                Copied Android Auto Headunit App files             ==="

# symlink to resources
if [ $APPS2RESOURCES -eq 1 ]
then
  ln -sf /tmp/mnt/resources/aio/apps/_androidauto /jci/gui/apps/_androidauto
  log_message "===                Created Symlink To Resources Partition             ==="
fi

# copy additionalApps.js, if not already present
if [ $CASDK_MODE -eq 0 ]
then
  log_message "===           No additionalApps.js available, will copy one           ==="
  cp -a ${MYDIR}/config/jci/opera/opera_dir/userjs/*.js /jci/opera/opera_dir/userjs/ && CASDK_MODE=1
  find /jci/opera/opera_dir/userjs/ -type f -name '*.js' -exec chmod 777 {} \;
fi

create_app_json
# add preload to the AA json entry if needed
if grep -Fq "androidauto" ${ADDITIONAL_APPS_JSON} && ! grep -Fq "preload.js" ${ADDITIONAL_APPS_JSON}
then
  remove_app_json "_androidauto"
fi
# call function add_app_json to modify additionalApps.json
add_app_json "_androidauto" "Android Auto" "preload.js"

if [ -e /etc/asound.conf.org ]
then
  # fix link from previous version
  if ! [ -L /etc/asound.conf ]; then
    mv /etc/asound.conf ${MYDIR}/asound.conf.AA
    ln -sf /data/asound.conf /etc/asound.conf
  fi
  rm -f /etc/asound.conf.org
  log_message "===     /etc/asound.conf reverted from factory /data/asound.conf    ==="
fi

if [ $TESTBKUPS -eq 1 ]
then
  cp ${STAGE_WIFI} "${MYDIR}/bakups/test/stage_wifi_androidauto-after.sh"
  [ -f ${ADDITIONAL_APPS_JSON} ] && cp ${ADDITIONAL_APPS_JSON} "${MYDIR}/bakups/test/additionalApps_after-AA.json"
fi

# Move headunit log file to USB Drive if exists
if [ -e /tmp/mnt/data/headunit.log ]
then
  mv /tmp/mnt/data/headunit.log ${MYDIR}
  log_message "===                 Moved headunit.log To USB Drive                   ==="
fi
