# Install Android Auto Headunit App
show_message "INSTALL ANDROID AUTO HEADUNIT APP v${AA_VER} ..."
log_message "====************  INSTALL ANDROID AUTO HEADUNIT APP v${AA_VER}...*********===="
TESTBKUPS=1
if [ $TESTBKUPS -eq 1 ]
then
	cp /jci/scripts/stage_wifi.sh "${MYDIR}/bakups/test/stage_wifi_androidauto-before.sh"
	cp /jci/opera/opera_dir/userjs/additionalApps.json "${MYDIR}/bakups/test/additionalApps_androidauto-1_before.json"
	cp /jci/sm/sm.conf "${MYDIR}/bakups/test/sm_androidauto-before.conf"
fi

### kills all WebSocket daemons
killall -q -9 headunit
pkill websocketd

rm -fr /jci/gui/apps/_androidauto
rm -fr /tmp/mnt/data_persist/dev/bin/headunit*
rm -fr /tmp/mnt/data_persist/dev/androidauto
rm -f /tmp/mnt/data_persist/dev/bin/aaserver
rm -f /tmp/mnt/data_persist/dev/bin/input_filter
rm -f /tmp/mnt/data/enable_input_filter
rm -f /tmp/mnt/data/input_filter
sed -i '/9999/d' /jci/scripts/stage_wifi.sh
sed -i '/headunit/d' /jci/scripts/stage_wifi.sh
sed -i '/Android Auto/d' /jci/scripts/stage_wifi.sh
log_message "===                   Removed old Android Auto App                    ==="
if grep -Fq "input_filter" /jci/sm/sm.conf
then
	sed -i '/input_filter/ d' /jci/sm/sm.conf
	log_message "===           Clean obsolete input_filter to /jci/sm/sm.conf          ==="
fi

# delete empty lines
sed -i '/^ *$/ d' /jci/scripts/stage_wifi.sh
sed -i '/#!/ a\ ' /jci/scripts/stage_wifi.sh

# check for 1st line of stage_wifi.sh
if grep -Fq "#!/bin/sh" /jci/scripts/stage_wifi.sh
then
		#echo -e "\n\n### Android Auto start" >> /jci/scripts/stage_wifi.sh
		#sleep 1
		#echo -e "headunit-wrapper &" >> /jci/scripts/stage_wifi.sh
    sed -i '/#!/ a\#### Android Auto start' /jci/scripts/stage_wifi.sh
    sleep 1
    sed -i '/Android Auto start/ i\ ' /jci/scripts/stage_wifi.sh
    sed -i '/Android Auto start/ a\headunit-wrapper &' /jci/scripts/stage_wifi.sh
		log_message "===      Added Android Auto entry to /jci/scripts/stage_wifi.sh       ==="
else
	cp -a "${MYDIR}/config/androidauto/stage_wifi.sh" /jci/scripts/
	log_message "===         Missing 1st line of stage_wifi.sh, copied new one         ==="
fi

cp -a ${MYDIR}/config/androidauto/data_persist/dev/* /tmp/mnt/data_persist/dev
cp -a ${MYDIR}/config/androidauto/jci/gui/apps/_androidauto /jci/gui/apps
chmod -R 755 /tmp/mnt/data_persist/dev/bin/
log_message "===                Copied Android Auto Headunit App files             ==="

# copy additionalApps.js, if not already present
if [ $CASDK_MODE -eq 0 ]
then
	log_message "===           No additionalApps.js available, will copy one           ==="
	cp -a ${MYDIR}/config/jci/opera/opera_dir/userjs/*.js /jci/opera/opera_dir/userjs/ && CASDK_MODE=1
	find /jci/opera/opera_dir/userjs/ -type f -name '*.js' -exec chmod 755 {} \;
fi

# create additionalApps.json file from scratch if the file does not exist
if [ ! -e /jci/opera/opera_dir/userjs/additionalApps.json ]
then
  echo "[" > /jci/opera/opera_dir/userjs/additionalApps.json
  echo "]" >> /jci/opera/opera_dir/userjs/additionalApps.json
  chmod 755 /jci/opera/opera_dir/userjs/additionalApps.json
  log_message "===                   Created additionalApps.json                     ==="
fi
# add preload to the AA json entry if needed
if ! grep -q "preload.js" /jci/opera/opera_dir/userjs/additionalApps.json
then
	remove_app_json "_androidauto"
fi
# call function add_app_json to modify additionalApps.json
add_app_json "_androidauto" "Android Auto" "preload.js"

if [ -e /etc/asound.conf.org ]
then
  # fix link from previous version
  if ! [ -L /etc/asound.conf ]; then
    mv /etc/asound.conf ${MYDIR}/asound.conf.AA
    ln -sf /data/asound.conf /etc/asound.conf
  fi
  rm -f /etc/asound.conf.org
  log_message "===     /etc/asound.conf reverted from factory /data/asound.conf    ==="
fi

if [ $TESTBKUPS -eq 1 ]
then
	cp -a /jci/scripts/stage_wifi.sh ${MYDIR}/bakups/test/stage_wifi_androidauto-after.sh
	cp -a /jci/opera/opera_dir/userjs/additionalApps.json "${MYDIR}/bakups/test/additionalApps_after-AA.json"
fi

# Move headunit log file to USB Drive if exists
if [ -e /tmp/mnt/data/headunit.log ]
then
	mv /tmp/mnt/data/headunit.log ${MYDIR}
	log_message "===                 Moved headunit.log To USB Drive                   ==="
fi
